<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xing Hu</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xinghu0164.github.io/"/>
  <updated>2017-08-01T00:47:25.000Z</updated>
  <id>http://xinghu0164.github.io/</id>
  
  <author>
    <name>Xing Hu (Stella)</name>
    <email>xinghu0164@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>What is Promise in JavaScript</title>
    <link href="http://xinghu0164.github.io/2017/08/01/js-promise/"/>
    <id>http://xinghu0164.github.io/2017/08/01/js-promise/</id>
    <published>2017-08-01T00:36:39.000Z</published>
    <updated>2017-08-01T00:47:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-a-Promise"><a href="#What-is-a-Promise" class="headerlink" title="What is a Promise?"></a>What is a Promise?</h2><p><strong>A promise is an object that may produce a single value some time in the future</strong>: either a resolved value, or a reason that it’s not resolved (e.g., a network error occurred). </p>
<p>A promise may be in one of 3 possible states: <em>fulfilled, rejected, or pending</em>.</p>
<p>A promise is an object which can be returned synchronously from an asynchronous function. 有了 Promise 对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise 对象提供统一的接口，使得控制异步操作更加容易。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What-is-a-Promise&quot;&gt;&lt;a href=&quot;#What-is-a-Promise&quot; class=&quot;headerlink&quot; title=&quot;What is a Promise?&quot;&gt;&lt;/a&gt;What is a Promise?&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://xinghu0164.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Wechaty API</title>
    <link href="http://xinghu0164.github.io/2017/07/25/wechaty/"/>
    <id>http://xinghu0164.github.io/2017/07/25/wechaty/</id>
    <published>2017-07-25T04:53:54.000Z</published>
    <updated>2017-08-01T01:00:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Events"><a href="#Events" class="headerlink" title="Events:"></a>Events:</h2><ul>
<li>scan: Emit when the bot needs to show you a QR Code for scanning</li>
<li>login: Emit when bot login is fully successful.</li>
<li>logout: Emit when bot detects log out.</li>
<li>message: Emit when there’s a new message.</li>
<li>error: Emit when an error occurs.</li>
<li>friend: Emit when a new friend request is received, or friendship is confirmed.</li>
<li>room-join: Emit when someone joins the room</li>
<li>room-leave: Emit when someone leaves the room</li>
<li>room-topic: Emit when someone changes the room’s topic</li>
</ul>
<h2 id="Main-Classes"><a href="#Main-Classes" class="headerlink" title="Main Classes"></a>Main Classes</h2><ul>
<li>Wechaty</li>
<li>Message</li>
<li>Contact</li>
<li>Room</li>
<li>FriendRequest</li>
<li>MediaMessage</li>
</ul>
<h2 id="Classes-Details"><a href="#Classes-Details" class="headerlink" title="Classes Details"></a>Classes Details</h2><h3 id="1-Wechaty-Class"><a href="#1-Wechaty-Class" class="headerlink" title="1.Wechaty Class"></a>1.Wechaty Class</h3><p>Main bot class.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Wechaty &#125; <span class="keyword">from</span> <span class="string">'wechaty'</span></div></pre></td></tr></table></figure>
<h4 id="1-1-Wechaty-instance-profile-string-Wechaty"><a href="#1-1-Wechaty-instance-profile-string-Wechaty" class="headerlink" title="1.1 Wechaty.instance(profile:string): Wechaty"></a>1.1 Wechaty.instance(profile:string): Wechaty</h4><p>Create a bot instance</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> bot = Wechaty.instance(&#123;</div><div class="line">  profile: <span class="string">'my-bot'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="1-2-Wechaty-init-Wechaty"><a href="#1-2-Wechaty-init-Wechaty" class="headerlink" title="1.2  Wechaty.init(): Wechaty"></a>1.2  Wechaty.init(): Wechaty</h4><p>Initialize the bot, return Promise.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><div class="line">wechaty.init()</div><div class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="comment">// do other stuff with bot here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-3-Wechaty-say-content-string"><a href="#1-3-Wechaty-say-content-string" class="headerlink" title="1.3 Wechaty.say(content: string)"></a>1.3 Wechaty.say(content: string)</h4><p><code>Wechaty</code> is <code>Sayable</code>, this method will send message to <code>filehelper</code>, just for logging/reporting usage for your convenience</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><div class="line">wechaty.say(<span class="string">'hello'</span>)</div></pre></td></tr></table></figure>
<h3 id="2-Message-Class"><a href="#2-Message-Class" class="headerlink" title="2 Message Class"></a>2 Message Class</h3><p>All wechat messages will be encapsulated as a Message.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">'wechaty'</span></div></pre></td></tr></table></figure>
<p><code>Message</code> is <code>Sayable</code></p>
<h3 id="Message-from-contact-Contact-string-Contact"><a href="#Message-from-contact-Contact-string-Contact" class="headerlink" title="Message.from(contact?: Contact|string): Contact"></a>Message.from(contact?: Contact|string): Contact</h3><p>Get the sender from a message, or set it.</p>
<h4 id="1-Message-from-Contact"><a href="#1-Message-from-Contact" class="headerlink" title="1. Message.from(): Contact"></a>1. Message.from(): Contact</h4><p>Get the sender from a message.</p>
<h4 id="2-Message-from-contact-Contact-void"><a href="#2-Message-from-contact-Contact-void" class="headerlink" title="2. Message.from(contact: Contact): void"></a>2. Message.from(contact: Contact): void</h4><p>Set a sender to the message</p>
<h4 id="3-Message-from-contactId-string-void"><a href="#3-Message-from-contactId-string-void" class="headerlink" title="3. Message.from(contactId: string): void"></a>3. Message.from(contactId: string): void</h4><p>Set a sender to the message by contact id</p>
<h3 id="Message-to-contact-Contact-string-Contact-void"><a href="#Message-to-contact-Contact-string-Contact-void" class="headerlink" title="Message.to(contact?: Contact|string): Contact|void"></a>Message.to(contact?: Contact|string): Contact|void</h3><p>Get the receiver from a message, or set it. </p>
<p>Only deal with Contact, if you need Room, try Message.room()</p>
<h4 id="1-Message-to-Contact"><a href="#1-Message-to-Contact" class="headerlink" title="1. Message.to(): Contact"></a>1. Message.to(): Contact</h4><p>Get the destination of the message</p>
<p>Message.to() will return null if a message is in a room, use Message.room() to get the room.</p>
<h4 id="2-Message-to-contact-Contact-void"><a href="#2-Message-to-contact-Contact-void" class="headerlink" title="2. Message.to(contact: Contact): void"></a>2. Message.to(contact: Contact): void</h4><p>Set the destination as Contact for the message</p>
<h4 id="3-Message-to-contact-string-void"><a href="#3-Message-to-contact-string-void" class="headerlink" title="3. Message.to(contact: string): void"></a>3. Message.to(contact: string): void</h4><p>Set the destination as Contact by ‘weixin’, for the message</p>
<h3 id="Message-content-content-string-string"><a href="#Message-content-content-string-string" class="headerlink" title="Message.content(content?: string): string"></a>Message.content(content?: string): string</h3><p>Get the content from a message, or set it.</p>
<h4 id="1-Message-content-string"><a href="#1-Message-content-string" class="headerlink" title="1. Message.content(): string"></a>1. Message.content(): string</h4><p>Get the content of the message</p>
<h4 id="2-Message-content-content-string-string"><a href="#2-Message-content-content-string-string" class="headerlink" title="2. Message.content(content: string): string"></a>2. Message.content(content: string): string</h4><p>Set the content for the message</p>
<h3 id="Message-room-room-Room-string-Room-void"><a href="#Message-room-room-Room-string-Room-void" class="headerlink" title="Message.room(room?: Room|string): Room|void"></a>Message.room(room?: Room|string): Room|void</h3><p>Get the room from a message, or set it.</p>
<h4 id="1-Message-room-Room-null"><a href="#1-Message-room-Room-null" class="headerlink" title="1. Message.room(): Room | null"></a>1. Message.room(): Room | null</h4><p>Get the room from the message. </p>
<p>If the message is not in a room, then will return <code>null</code></p>
<h4 id="2-Message-room-room-Room-void"><a href="#2-Message-room-room-Room-void" class="headerlink" title="2. Message.room(room: Room): void"></a>2. Message.room(room: Room): void</h4><p>Set the room for a message</p>
<h4 id="3-Message-room-roomId-string-void"><a href="#3-Message-room-roomId-string-void" class="headerlink" title="3. Message.room(roomId: string): void"></a>3. Message.room(roomId: string): void</h4><p>Set the room by id for a message</p>
<h3 id="Message-type-MsgType"><a href="#Message-type-MsgType" class="headerlink" title="Message.type(): MsgType"></a>Message.type(): MsgType</h3><p>Get the type from the message.</p>
<p>Some known value of the type list here is:</p>
<ul>
<li>TEXT               1  </li>
<li>IMAGE              3     </li>
<li>VOICE              34    </li>
<li>VERIFYMSG          37</li>
<li>POSSIBLEFRIEND_MSG 40</li>
<li>SHARECARD          42</li>
<li>VIDEO              43</li>
<li>EMOTICON           47</li>
<li>LOCATION           48</li>
<li>APP                49</li>
<li>VOIPMSG            50</li>
<li>STATUSNOTIFY       51</li>
<li>VOIPNOTIFY         52</li>
<li>VOIPINVITE         53</li>
<li>MICROVIDEO         62    </li>
<li>APP                49   </li>
<li>SYSNOTICE          9999 </li>
<li>SYS                10000 </li>
<li>RECALLED           10002</li>
</ul>
<h3 id="Message-typeApp-AppMsgType"><a href="#Message-typeApp-AppMsgType" class="headerlink" title="Message.typeApp(): AppMsgType"></a>Message.typeApp(): AppMsgType</h3><p>Get the app type from message, if not apptype, return 0</p>
<p>Some known value of the type list here is:</p>
<ul>
<li>TEXT                      1</li>
<li>IMG                       2</li>
<li>AUDIO                     3</li>
<li>VIDEO                     4</li>
<li>URL                       5</li>
<li>ATTACH                    6</li>
<li>OPEN                      7</li>
<li>EMOJI                     8</li>
<li>VOICE_REMIND              9</li>
<li>SCAN_GOOD                 10</li>
<li>GOOD                      13</li>
<li>EMOTION                   15</li>
<li>CARD_TICKET               16</li>
<li>REALTIME_SHARE_LOCATION   17</li>
<li>TRANSFERS                 2e3</li>
<li>RED_ENVELOPES             2001</li>
<li>READER_TYPE               100001</li>
</ul>
<h3 id="Message-say-content-string-Promise"><a href="#Message-say-content-string-Promise" class="headerlink" title="Message.say(content: string): Promise"></a>Message.say(content: string): Promise<void></void></h3><p>Reply a message to the sender.</p>
<h3 id="Message-mentioned-Contact"><a href="#Message-mentioned-Contact" class="headerlink" title="Message.mentioned(): Contact[]"></a>Message.mentioned(): Contact[]</h3><p>Return a contactlist which this message is mentioned for?</p>
<p>If the message is “@Botself bla…”, then the mention() will return a contactlist contains just bot self contact.</p>
<p>If the message is “@other_user bar…”, then the mention() will return a contact for the “other_user”.</p>
<p>If no one was mentioned we return []. (contact.mention().length)</p>
<p>About <code>@</code> blank in Wechat: It use special char with unicode code <code>8197</code> to indetify <code>real@</code></p>
<h3 id="Message-self-message-Message-boolean"><a href="#Message-self-message-Message-boolean" class="headerlink" title="Message.self(message: Message): boolean"></a>Message.self(message: Message): boolean</h3><p>Check if a message is sent by self.</p>
<p>Return <code>true</code> for send from self, <code>false</code> for send from others.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (message.self()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'this message is sent by myself!'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Message-id-string"><a href="#Message-id-string" class="headerlink" title="Message.id: string"></a>Message.id: string</h3><p>Get the id from a message</p>
<h3 id="Message-filename-string"><a href="#Message-filename-string" class="headerlink" title="Message.filename():string"></a>Message.filename():string</h3><p>Get the filename from a media message, if not media message, throw Error</p>
<h2 id="Contact-Class"><a href="#Contact-Class" class="headerlink" title="Contact Class"></a>Contact Class</h2><figure class="highlight ts"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Contact &#125; <span class="keyword">from</span> <span class="string">'wechaty'</span></div></pre></td></tr></table></figure>
<p><code>Contact</code> is <code>Sayable</code></p>
<h3 id="Contact-id-string"><a href="#Contact-id-string" class="headerlink" title="Contact.id: string"></a>Contact.id: string</h3><p>Uniq id</p>
<h3 id="Contact-name-string-‘’"><a href="#Contact-name-string-‘’" class="headerlink" title="Contact.name(): string | ‘’"></a>Contact.name(): string | ‘’</h3><p>Get the name from a contact</p>
<h3 id="Contact-city-string-undefined"><a href="#Contact-city-string-undefined" class="headerlink" title="Contact.city(): string | undefined"></a>Contact.city(): string | undefined</h3><p>Get the region ‘city’ from a contact</p>
<h3 id="Contact-province-string-undefined"><a href="#Contact-province-string-undefined" class="headerlink" title="Contact.province(): string | undefined"></a>Contact.province(): string | undefined</h3><p>Get the region ‘province’ from a contact</p>
<h3 id="Contact-gender-Gender-undefine"><a href="#Contact-gender-Gender-undefine" class="headerlink" title="Contact.gender(): Gender | undefine"></a>Contact.gender(): Gender | undefine</h3><p>Get the gender from a contact: </p>
<ul>
<li>Unknown = 0,</li>
<li>Male    = 1,</li>
<li>Female  = 2,</li>
</ul>
<h3 id="Contact-avatar"><a href="#Contact-avatar" class="headerlink" title="Contact.avatar():"></a>Contact.avatar():</h3><p>Save avatar to file, simple code as follows: (save contact avator to file <code>${contact.name()}.jpg</code>)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// contact: Contact</span></div><div class="line"><span class="keyword">const</span> avatarFileName = <span class="string">`<span class="subst">$&#123;contact.name()&#125;</span>.jpg`</span></div><div class="line"><span class="keyword">const</span> avatarReadStream = <span class="keyword">await</span> contact.avatar()</div><div class="line"><span class="keyword">const</span> avatarWriteStream = createWriteStream(avatarFileName)</div><div class="line">avatarReadStream.pipe(avatarWriteStream)</div></pre></td></tr></table></figure>
<h3 id="Contact-alias-string-null"><a href="#Contact-alias-string-null" class="headerlink" title="Contact.alias(): string | null"></a>Contact.alias(): string | null</h3><p>Get the alias name from a contact</p>
<h3 id="Contact-alias-alias-string-Promise"><a href="#Contact-alias-alias-string-Promise" class="headerlink" title="Contact.alias(alias: string): Promise"></a>Contact.alias(alias: string): Promise<boolean></boolean></h3><p>Set alias name to a contact</p>
<p>Return a Promise<boolean>, true for modified successful, false for failure.</boolean></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> ret = <span class="keyword">await</span> contact.alias(<span class="string">"newAlias"</span>)</div><div class="line">  <span class="keyword">if</span> (ret) &#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'set alias successfulyy!'</span>)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">console</span>.error(<span class="string">'failed to set alias'</span>) </div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>use <code>Contact.alias(null)</code> to clear alias</p>
<h3 id="Contact-weixin-string-‘’"><a href="#Contact-weixin-string-‘’" class="headerlink" title="Contact.weixin(): string | ‘’"></a>Contact.weixin(): string | ‘’</h3><p>Get the weixin number from a contact, </p>
<p>Sometimes cannot get weixin number due to weixin security mechanism, not recommend.</p>
<h3 id="Contact-star-boolean"><a href="#Contact-star-boolean" class="headerlink" title="Contact.star(): boolean"></a>Contact.star(): boolean</h3><p>Check it the contact is star contact.</p>
<p>True for star friend, False for no star friend</p>
<h3 id="Contact-refresh-Promise"><a href="#Contact-refresh-Promise" class="headerlink" title="Contact.refresh(): Promise"></a>Contact.refresh(): Promise<this></this></h3><p>Force reload data for Contact</p>
<h3 id="Contact-self-boolean"><a href="#Contact-self-boolean" class="headerlink" title="Contact.self(): boolean"></a>Contact.self(): boolean</h3><p>Check if contact is self</p>
<p>True for contact is self, False for contact is others</p>
<h3 id="Contact-stranger-boolean"><a href="#Contact-stranger-boolean" class="headerlink" title="Contact.stranger(): boolean"></a>Contact.stranger(): boolean</h3><p>Check if contact is strange</p>
<p>True for not friend of the bot, False for friend of the bot</p>
<h3 id="Contact-say-content-string-Promise"><a href="#Contact-say-content-string-Promise" class="headerlink" title="Contact.say(content: string): Promise"></a>Contact.say(content: string): Promise<void></void></h3><p>Say <code>content</code> to Contact</p>
<h3 id="Contact-Query-Type"><a href="#Contact-Query-Type" class="headerlink" title="Contact Query Type"></a>Contact Query Type</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">type</span> Query = &#123;</div><div class="line">  name?: <span class="built_in">string</span> | <span class="built_in">RegExp</span></div><div class="line">  alias?: <span class="built_in">string</span> | <span class="built_in">RegExp</span></div><div class="line">&#125;</div><div class="line">Contact.find(query : Query) : Contact | <span class="literal">null</span></div><div class="line">Contact.findAll(query : Query) : Contact[]</div></pre></td></tr></table></figure>
<h3 id="static-Contact-find-query-Query-Promise"><a href="#static-Contact-find-query-Query-Promise" class="headerlink" title="static Contact.find(query: Query): Promise"></a>static Contact.find(query: Query): Promise</h3><p>Find contact by name or alias, if the result more than one, return the first one.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> contactFindByName = <span class="keyword">await</span> Contact.find(&#123; name:<span class="string">"ContactName"</span>&#125; ) </div><div class="line"><span class="keyword">const</span> contactFindByAlias = <span class="keyword">await</span> Contact.find(&#123; alias:<span class="string">"ContactAlias"</span>&#125; )</div></pre></td></tr></table></figure>
<h3 id="static-Contact-findAll-query-Query-Promise"><a href="#static-Contact-findAll-query-Query-Promise" class="headerlink" title="static Contact.findAll(query: Query): Promise"></a>static Contact.findAll(query: Query): Promise</h3><p>Find contact by alias or name, return all the match contact   </p>
<p>If use <code>Contact.findAll()</code> get the contact list of the bot.</p>
<h2 id="Class-Room"><a href="#Class-Room" class="headerlink" title="Class Room"></a>Class Room</h2><figure class="highlight ts"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Room &#125; <span class="keyword">from</span> <span class="string">'wechaty'</span></div></pre></td></tr></table></figure>
<p><code>Room</code> is <code>Sayable</code></p>
<p>Doc is cheap, show you code: <a href="https://github.com/wechaty/wechaty/blob/master/example/room-bot.ts" target="_blank" rel="external">Example/Room-Bot</a></p>
<h3 id="Room-say-content-string-replyTo-Contact-Contact-Promise"><a href="#Room-say-content-string-replyTo-Contact-Contact-Promise" class="headerlink" title="Room.say(content: string, replyTo: Contact|Contact[]): Promise"></a>Room.say(content: string, replyTo: Contact|Contact[]): Promise<void></void></h3><p>Say <code>content</code> inside Room.</p>
<p>If you set <code>replyTo</code>, then <code>say()</code> will mention them as well.</p>
<blockquote>
<p>“@replyTo content”</p>
</blockquote>
<h3 id="Room-refresh-Promise"><a href="#Room-refresh-Promise" class="headerlink" title="Room.refresh(): Promise"></a>Room.refresh(): Promise<room></room></h3><p>Force reload data for Room</p>
<h3 id="Room-Events"><a href="#Room-Events" class="headerlink" title="Room Events"></a>Room Events</h3><p><code>this</code> is <code>Sayable</code> for all listeners.</p>
<p>Which means there will be a <code>this.say()</code> the method inside listener call, you can use it sending a message to <code>filehelper</code>, just for logging/reporting usage for your convenience.</p>
<h4 id="Event-join"><a href="#Event-join" class="headerlink" title="Event: join"></a>Event: <code>join</code></h4><figure class="highlight typescript"><table><tr><td class="code"><pre><div class="line">Room.on(<span class="string">'join'</span>, <span class="function">(<span class="params"><span class="keyword">this</span>: Room, inviteeList: Contact[], inviter: Contact</span>) =&gt;</span> <span class="built_in">void</span>)</div></pre></td></tr></table></figure>
<p>Event <code>join</code>: Room New Member</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><div class="line">room.on(<span class="string">'join'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">inviteeList, inviter</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`the room <span class="subst">$&#123;room.topic()&#125;</span>, got new members invited by <span class="subst">$&#123;inviter.name()&#125;</span>`</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="Event-leave"><a href="#Event-leave" class="headerlink" title="Event: leave"></a>Event: <code>leave</code></h4><figure class="highlight typescript"><table><tr><td class="code"><pre><div class="line">Room.on(<span class="string">'leave'</span>, <span class="function">(<span class="params"><span class="keyword">this</span>: Room, leaverList: Contact[]</span>) =&gt;</span> <span class="built_in">void</span>)</div></pre></td></tr></table></figure>
<h4 id="Event-topic"><a href="#Event-topic" class="headerlink" title="Event: topic"></a>Event: <code>topic</code></h4><figure class="highlight typescript"><table><tr><td class="code"><pre><div class="line">Room.on(<span class="string">'topic'</span>, <span class="function">(<span class="params"><span class="keyword">this</span>: Room, topic: <span class="built_in">string</span>, oldTopic: <span class="built_in">string</span>, changer: Contact</span>) =&gt;</span> <span class="built_in">void</span>)</div></pre></td></tr></table></figure>
<h3 id="Room-Query-Type"><a href="#Room-Query-Type" class="headerlink" title="Room Query Type"></a>Room Query Type</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">type</span> Query = &#123; topic: <span class="built_in">string</span>|Regex &#125;</div><div class="line">Room.find(query : Query) : Room | <span class="literal">null</span></div><div class="line">Room.findAll(query : Query) : Room[]</div></pre></td></tr></table></figure>
<h3 id="static-Room-find-query-Query-Promise"><a href="#static-Room-find-query-Query-Promise" class="headerlink" title="static Room.find(query: Query): Promise"></a>static Room.find(query: Query): Promise<room></room></h3><p>Find room by topic, if the result more than one, return the first one.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><div class="line">Room.find(&#123; topic:<span class="string">"Room Topic"</span>&#125; ) </div><div class="line">  .then(<span class="function"><span class="params">dingRoom</span> =&gt;</span>&#123;</div><div class="line">  <span class="comment">//Room Operation</span></div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<h3 id="static-Room-findAll-query-Query-Promise"><a href="#static-Room-findAll-query-Query-Promise" class="headerlink" title="static Room.findAll(query: Query): Promise"></a>static Room.findAll(query: Query): Promise<room[]></room[]></h3><p>Find room by topic, return all the match room</p>
<h3 id="static-Room-create-contactList-Contact-topic-string-Promise"><a href="#static-Room-create-contactList-Contact-topic-string-Promise" class="headerlink" title="static Room.create(contactList: Contact[], topic?: string): Promise"></a>static Room.create(contactList: Contact[], topic?: string): Promise<void></void></h3><p>Create a new room.</p>
<h3 id="Room-add-contact-Contact-Promise"><a href="#Room-add-contact-Contact-Promise" class="headerlink" title="Room.add(contact: Contact): Promise"></a>Room.add(contact: Contact): Promise<void></void></h3><p>Add contact in a room</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> friend = message.get(<span class="string">'from'</span>)</div><div class="line"><span class="keyword">const</span> room = Room.find(&#123; name: <span class="string">'Group Name'</span> &#125;)</div><div class="line"><span class="keyword">if</span> (room) &#123;</div><div class="line">  room.add(friend)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Room-del-contact-Contact-void"><a href="#Room-del-contact-Contact-void" class="headerlink" title="Room.del(contact: Contact): void"></a>Room.del(contact: Contact): void</h3><p>Delete a contact from the room</p>
<h3 id="Room-topic-string"><a href="#Room-topic-string" class="headerlink" title="Room.topic(): string"></a>Room.topic(): string</h3><p>Get topic from the room</p>
<h3 id="Room-topic-newTopic-string-void"><a href="#Room-topic-newTopic-string-void" class="headerlink" title="Room.topic(newTopic: string): void"></a>Room.topic(newTopic: string): void</h3><p>Set topic for the room </p>
<h3 id="Room-alias-contact-Contact-string"><a href="#Room-alias-contact-Contact-string" class="headerlink" title="Room.alias (contact: Contact): string"></a>Room.alias (contact: Contact): string</h3><p>Get the contact’s alias in the room, if the contact doesn’t set its roomAlias in the room, it return name.</p>
<h3 id="Room-has-contact-Contact-boolean"><a href="#Room-has-contact-Contact-boolean" class="headerlink" title="Room.has(contact Contact): boolean"></a>Room.has(contact Contact): boolean</h3><p>Check if the room has member <code>contact</code>. </p>
<p>Return <code>true</code> if has contact, else return <code>false</code>.</p>
<h3 id="Room-owner-Contact-null"><a href="#Room-owner-Contact-null" class="headerlink" title="Room.owner(): Contact|null"></a>Room.owner(): Contact|null</h3><p>Get room’s owner from the room.</p>
<p>Not recommend, because cannot always get the owner</p>
<h3 id="Room-member-name-string-Contact-null"><a href="#Room-member-name-string-Contact-null" class="headerlink" title="Room.member(name: string): Contact|null"></a>Room.member(name: string): Contact|null</h3><p>Find the contact by name in the room, equals to <code>Room.member({name:name})</code></p>
<h4 id="notice"><a href="#notice" class="headerlink" title="notice:"></a>notice:</h4><p>there are three kinds of names in wechat:</p>
<ul>
<li><p><strong>Definition</strong>:  </p>
<ul>
<li><strong>name:</strong> the name-string set by user-self, should be called <strong>name</strong></li>
<li><strong>room alias:</strong> the name-string set by user-self in a room, should be called <strong>room alias</strong>.  <strong>room alias</strong> only belongs to the room.</li>
<li><strong>contact alias:</strong> the name-string set by bot for others, should be called <strong>contact alias</strong></li>
</ul>
</li>
<li><p><strong>Display order in wechat room</strong>:</p>
<ul>
<li><p><strong>@ Event</strong><br>When someone @ a contact in  a room, wechat recognise the name order as follows:<br><code>room alias &gt; name</code></p>
</li>
<li><p><strong>system message</strong><br>When room event happens(join, leave, changetopic), system message recognise the name order as follows:<br><code>contact alias &gt; name</code></p>
</li>
<li><p><strong>on-screen Names</strong><br>The contact name showed to the wechat user in the group<br><code>contact alias &gt; room alias &gt; nickName</code></p>
</li>
</ul>
</li>
<li><p><strong><code>Room.member()</code> query key</strong>:</p>
<ul>
<li>self-set: {name: string}</li>
<li>other-set: {alias: string}</li>
</ul>
</li>
</ul>
<h3 id="Room-member-alias-string-Contact-null"><a href="#Room-member-alias-string-Contact-null" class="headerlink" title="Room.member({alias: string}): Contact|null"></a>Room.member({alias: string}): Contact|null</h3><p>Find the contact by alias in the room</p>
<h3 id="Room-member-name-string-Contact-null-1"><a href="#Room-member-name-string-Contact-null-1" class="headerlink" title="Room.member({name: string}): Contact|null"></a>Room.member({name: string}): Contact|null</h3><p>Find the contact by name in room.</p>
<h3 id="Room-memberList-Contact"><a href="#Room-memberList-Contact" class="headerlink" title="Room.memberList(): Contact[]"></a>Room.memberList(): Contact[]</h3><p>Get all room member from the room</p>
<h2 id="Class-FriendRequest"><a href="#Class-FriendRequest" class="headerlink" title="Class FriendRequest"></a>Class FriendRequest</h2><p>Send, receive friend request, and friend confirmation events.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; FriendRequest &#125; <span class="keyword">from</span> <span class="string">'wechaty'</span></div></pre></td></tr></table></figure>
<p>When someone sends you a friend request, there will be a Wechaty <code>friend</code> event fired.</p>
<h3 id="FriendRequest-hello-string"><a href="#FriendRequest-hello-string" class="headerlink" title="FriendRequest.hello: string"></a>FriendRequest.hello: string</h3><p>Verify message</p>
<h3 id="FriendRequest-accept-Promise"><a href="#FriendRequest-accept-Promise" class="headerlink" title="FriendRequest.accept(): Promise"></a>FriendRequest.accept(): Promise<boolean></boolean></h3><p>Accept a friend request</p>
<p>Return a Promise, true for accept successful, false for failure.</p>
<h3 id="FriendRequest-send-contact-Contact-hello-string-Promise"><a href="#FriendRequest-send-contact-Contact-hello-string-Promise" class="headerlink" title="FriendRequest.send(contact: Contact, hello: string): Promise"></a>FriendRequest.send(contact: Contact, hello: string): Promise<boolean></boolean></h3><p>Send a new friend request</p>
<p>Return a Promise, true for accept successful, false for failure.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">from</span> = message.from()</div><div class="line"><span class="keyword">const</span> request = <span class="keyword">new</span> FriendRequest()</div><div class="line">request.send(<span class="keyword">from</span>, <span class="string">'hello~'</span>)</div></pre></td></tr></table></figure>
<h2 id="Class-MediaMessage"><a href="#Class-MediaMessage" class="headerlink" title="Class MediaMessage"></a>Class MediaMessage</h2><p>Create a media message object.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; MediaMessage &#125; <span class="keyword">from</span> <span class="string">'wechaty'</span></div></pre></td></tr></table></figure>
<h3 id="new-MediaMessage-path-string"><a href="#new-MediaMessage-path-string" class="headerlink" title="new MediaMessage(path: string)"></a>new MediaMessage(path: string)</h3><figure class="highlight ts"><table><tr><td class="code"><pre><div class="line">message.say(<span class="keyword">new</span> MediaMessage(<span class="string">'images.jpg'</span>))</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Events&quot;&gt;&lt;a href=&quot;#Events&quot; class=&quot;headerlink&quot; title=&quot;Events:&quot;&gt;&lt;/a&gt;Events:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;scan: Emit when the bot needs to show you a QR
    
    </summary>
    
    
      <category term="wechaty" scheme="http://xinghu0164.github.io/tags/wechaty/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS Study Notes 2</title>
    <link href="http://xinghu0164.github.io/2017/07/19/angular2/"/>
    <id>http://xinghu0164.github.io/2017/07/19/angular2/</id>
    <published>2017-07-19T03:38:45.000Z</published>
    <updated>2017-07-25T04:53:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><p>An AngularJS module defines an application.</p>
<p>The module is a container for the different parts of an application.</p>
<p>The module is a container for the application controllers.</p>
<p>Controllers always belong to a module.</p>
<p>e.g. create a module and add one controller to it<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">&lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;myCtrl&quot;&gt;</div><div class="line">&#123;&#123; firstName + &quot; &quot; + lastName &#125;&#125;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">//declare the myApp above</div><div class="line">var app = angular.module(&quot;myApp&quot;, []);</div><div class="line"></div><div class="line">app.controller(&quot;myCtrl&quot;, function($scope) &#123;</div><div class="line">    $scope.firstName = &quot;John&quot;;</div><div class="line">    $scope.lastName = &quot;Doe&quot;;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h2 id="Functions-local-to-module"><a href="#Functions-local-to-module" class="headerlink" title="Functions local to module"></a>Functions local to module</h2><p>Global functions should be avoided in JavaScript. They can easily be overwritten or destroyed by other scripts.</p>
<p>AngularJS modules reduces this problem, by keeping all functions local to the module.</p>
<h2 id="Load-the-library"><a href="#Load-the-library" class="headerlink" title="Load the library"></a>Load the library</h2><p>It is recommended that you load the AngularJS library either in the <head> or at the start of the </head><body>.<br>This is because calls to angular.module can only be compiled after the library has been loaded.</body></p>
<h2 id="Directives"><a href="#Directives" class="headerlink" title="Directives"></a>Directives</h2><p>AngularJS lets you extend HTML with new attributes called Directives.</p>
<p>AngularJS has a set of built-in directives which offers functionality to your applications.</p>
<p>AngularJS also lets you define your own directives.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Modules&quot;&gt;&lt;a href=&quot;#Modules&quot; class=&quot;headerlink&quot; title=&quot;Modules&quot;&gt;&lt;/a&gt;Modules&lt;/h2&gt;&lt;p&gt;An AngularJS module defines an application.&lt;/p&gt;
&lt;p
    
    </summary>
    
    
      <category term="AngularJS" scheme="http://xinghu0164.github.io/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS Basic Concepts</title>
    <link href="http://xinghu0164.github.io/2017/07/18/angular1/"/>
    <id>http://xinghu0164.github.io/2017/07/18/angular1/</id>
    <published>2017-07-18T04:54:13.000Z</published>
    <updated>2017-07-19T04:29:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS-Framework"><a href="#JS-Framework" class="headerlink" title="JS Framework"></a>JS Framework</h2><p>AngularJS is a JavaScript framework. It is a library written in JavaScript.</p>
<p>AngularJS is distributed as a JavaScript file, and can be added to a web page with a script tag:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="Important-Concepts"><a href="#Important-Concepts" class="headerlink" title="Important Concepts"></a>Important Concepts</h2><p>AngularJS extends HTML with <strong>ng-directives</strong>.</p>
<p>The <strong>ng-app</strong> directive defines an AngularJS application.</p>
<p>The <strong>ng-model</strong> directive binds the value of HTML controls (input, select, textarea) to application data.</p>
<p>The <strong>ng-bind</strong> directive binds application data to the HTML view.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;div ng-app=&quot;&quot;&gt;</div><div class="line">  &lt;p&gt;Name: &lt;input type=&quot;text&quot; ng-model=&quot;name&quot;&gt;&lt;/p&gt;</div><div class="line">  &lt;p ng-bind=&quot;name&quot;&gt;&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>The <strong>ng-init</strong> directive initializes AngularJS application variables.<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;div ng-app=&quot;&quot; ng-init=&quot;firstName=&apos;John&apos;&quot;&gt;</div><div class="line"></div><div class="line">&lt;p&gt;The name is &lt;span ng-bind=&quot;firstName&quot;&gt;&lt;/span&gt;&lt;/p&gt;</div><div class="line">&lt;p&gt;The name is also as &#123;&#123;firstName&#125;&#125;&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<h2 id="Expressions"><a href="#Expressions" class="headerlink" title="Expressions"></a>Expressions</h2><p>AngularJS expressions are written inside double braces: .<br>AngularJS expressions bind AngularJS data to HTML the same way as the <strong>ng-bind</strong> directive.</p>
<h2 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h2><p>AngularJS <strong>modules</strong> define AngularJS applications.</p>
<p>AngularJS <strong>controllers</strong> control AngularJS applications.</p>
<p>The <strong>ng-app</strong> directive defines the application, the <strong>ng-controller</strong> directive defines the controller.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;myCtrl&quot;&gt;</div><div class="line"></div><div class="line">First Name: &lt;input type=&quot;text&quot; ng-model=&quot;firstName&quot;&gt;&lt;br&gt;</div><div class="line">Last Name: &lt;input type=&quot;text&quot; ng-model=&quot;lastName&quot;&gt;&lt;br&gt;</div><div class="line">&lt;br&gt;</div><div class="line">Full Name: &#123;&#123;firstName + &quot; &quot; + lastName&#125;&#125;</div><div class="line"></div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var app = angular.module(&apos;myApp&apos;, []);</div><div class="line">app.controller(&apos;myCtrl&apos;, function($scope) &#123;</div><div class="line">    $scope.firstName= &quot;John&quot;;</div><div class="line">    $scope.lastName= &quot;Doe&quot;;</div><div class="line">&#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JS-Framework&quot;&gt;&lt;a href=&quot;#JS-Framework&quot; class=&quot;headerlink&quot; title=&quot;JS Framework&quot;&gt;&lt;/a&gt;JS Framework&lt;/h2&gt;&lt;p&gt;AngularJS is a JavaScript fram
    
    </summary>
    
    
      <category term="AngularJS" scheme="http://xinghu0164.github.io/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>Behavior Questions Preparation 2</title>
    <link href="http://xinghu0164.github.io/2017/07/11/hebaviorquestion2/"/>
    <id>http://xinghu0164.github.io/2017/07/11/hebaviorquestion2/</id>
    <published>2017-07-11T06:48:28.000Z</published>
    <updated>2017-07-19T04:19:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Common-Behavior-Questions-2"><a href="#Common-Behavior-Questions-2" class="headerlink" title="Common Behavior Questions 2"></a>Common Behavior Questions 2</h2><h3 id="1-Why-did-you-apply-for-the-AEMO-Graduate-Development-Program"><a href="#1-Why-did-you-apply-for-the-AEMO-Graduate-Development-Program" class="headerlink" title="1. Why did you apply for the AEMO Graduate Development Program?"></a>1. Why did you apply for the AEMO Graduate Development Program?</h3><ul>
<li>You believe that your skills, qualifications and experience are tailored to the position you applied for and therefore you think you can utilize your abilities to the maximum.</li>
<li>You consider this job opportunity (i.e. the offered position) to be perfect for enhancing your career as you will learn a lot about your line of work and profession.</li>
<li>Another point you can stress is that you would always have liked to work in their (successful, resourceful, initiative etc) company and the enormous amount of knowledge and information that you would get and develop while working with them.</li>
</ul>
<p><em>Firstly I believe that my skills, qualifications and experience are tailored to the software engineering position and therefore I think I can utilize your abilities to the maximum. Then this job opportunity would be perfect for enhancing my career as I will learn a lot through working with professionals. And this program would make an influence on the energy and everyone’s life. So I want to contribute my effort to this industry. At last, I really appreciate the diverse company culture and the open mind. </em></p>
<h3 id="2-What-relevant-technical-skills-knowledge-and-experience-can-you-bring-to-a-Graduate-role-at-AEMO"><a href="#2-What-relevant-technical-skills-knowledge-and-experience-can-you-bring-to-a-Graduate-role-at-AEMO" class="headerlink" title="2. What relevant technical skills, knowledge and experience can you bring to a Graduate role at AEMO?"></a>2. What relevant technical skills, knowledge and experience can you bring to a Graduate role at AEMO?</h3><p><em>With a perfect match for the software engineering position and my major, I am confident of having solid theoretical knowledge base and practical experience in this area. I have studied and experienced diverse software development methods, such as Waterfall and Agile process. And in each step, I have undertaken different roles to solve problems. For example, I have acted as the main developer to program new modules individually, and also performed as a product owner to discuss with clients about changeable requirements. So I can provide open ideas and programming ability to solve problems. </em></p>
<h3 id="3-What-personal-strengths-values-and-or-attributes-will-ensure-your-success-at-AEMO"><a href="#3-What-personal-strengths-values-and-or-attributes-will-ensure-your-success-at-AEMO" class="headerlink" title="3. What personal strengths, values and/or attributes will ensure your success at AEMO?"></a>3. What personal strengths, values and/or attributes will ensure your success at AEMO?</h3><p><em>As a new graduate, I have the theoretical knowledge base and I have strong willingness to work hard for the project’s good progress. Being punctual and sincere, I can finish the job given to me on time and try my best to fulfill all the requirement in high quality. And I also a team player, I would like to communicate with colleagues, share ideas and solve all problems in a better way. I am always self-motivated and have a long- term ambition which pushes me to new technologies and knowledge to get used to different situations in order to fit this changeable industry.</em></p>
<h3 id="4-If-you-could-ask-our-CEO-one-question-what-would-it-be"><a href="#4-If-you-could-ask-our-CEO-one-question-what-would-it-be" class="headerlink" title="4. If you could ask our CEO one question, what would it be?"></a>4. If you could ask our CEO one question, what would it be?</h3><p><em>What are the growth plans of your company in 5 years and 20 years? </em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Common-Behavior-Questions-2&quot;&gt;&lt;a href=&quot;#Common-Behavior-Questions-2&quot; class=&quot;headerlink&quot; title=&quot;Common Behavior Questions 2&quot;&gt;&lt;/a&gt;Commo
    
    </summary>
    
    
      <category term="Behavior Questions" scheme="http://xinghu0164.github.io/tags/Behavior-Questions/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Study Notes1</title>
    <link href="http://xinghu0164.github.io/2017/07/07/js1/"/>
    <id>http://xinghu0164.github.io/2017/07/07/js1/</id>
    <published>2017-07-07T06:51:31.000Z</published>
    <updated>2017-07-19T04:24:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Using-document-write-after-an-HTML-document-is-fully-loaded-will-delete-all-existing-HTML"><a href="#Using-document-write-after-an-HTML-document-is-fully-loaded-will-delete-all-existing-HTML" class="headerlink" title="Using document.write() after an HTML document is fully loaded, will delete all existing HTML:"></a>Using document.write() after an HTML document is fully loaded, will delete all existing HTML:</h3><p>   The document.write() method should only be used for testing.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;h1&gt;My First Web Page&lt;/h1&gt;</div><div class="line">&lt;p&gt;My first paragraph.&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;button onclick=&quot;document.write(5 + 6)&quot;&gt;Try it&lt;/button&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="JavaScript-Identifier"><a href="#JavaScript-Identifier" class="headerlink" title="JavaScript Identifier"></a>JavaScript Identifier</h3><p>In JavaScript, the first character must be a letter, or an underscore (_), or a dollar sign ($).<br>Subsequent characters may be letters, digits, underscores, or dollar signs.</p>
<h3 id="Case-sensitive"><a href="#Case-sensitive" class="headerlink" title="Case sensitive"></a>Case sensitive</h3><p>All JavaScript identifiers are case sensitive.<br>The variables ‘lastName’ and ‘lastname’, are two different variables.</p>
<h3 id="Character-set"><a href="#Character-set" class="headerlink" title="Character set"></a>Character set</h3><p>JavaScript uses the Unicode character set.<br>Unicode covers (almost) all the characters, punctuations, and symbols in the world.</p>
<h3 id="The-this-Keyword"><a href="#The-this-Keyword" class="headerlink" title="The this Keyword"></a>The this Keyword</h3><p>In JavaScript, the thing called this, is the object that “owns” the current code.<br>The value of this, when used in a function, is the object that “owns” the function.</p>
<p>Note that this is not a variable. It is a keyword. You cannot change the value of this.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Using-document-write-after-an-HTML-document-is-fully-loaded-will-delete-all-existing-HTML&quot;&gt;&lt;a href=&quot;#Using-document-write-after-an-H
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://xinghu0164.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Behavior Questions Preparation 1</title>
    <link href="http://xinghu0164.github.io/2017/07/03/behaviorquestion/"/>
    <id>http://xinghu0164.github.io/2017/07/03/behaviorquestion/</id>
    <published>2017-07-03T13:33:05.000Z</published>
    <updated>2017-07-19T04:19:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Common-Behavior-Questions"><a href="#Common-Behavior-Questions" class="headerlink" title="Common Behavior Questions"></a>Common Behavior Questions</h2><h3 id="1-Introduce-yourself-Tell-us-about-yourself"><a href="#1-Introduce-yourself-Tell-us-about-yourself" class="headerlink" title="1. Introduce yourself (Tell us about yourself)"></a>1. Introduce yourself (Tell us about yourself)</h3><p><em> Hi everyone, I am Xing Hu, 24 years old and from China. Now I am pursuing my master degree of  software engineering in University of Melbourne. Well, I finished my bachelor degree in Hunan University, one of Top 10 universities in China. After graduation, to pursue further education and  experience diverse cultures and life, I chose the best university in Australia, well I think my university is.  While, I am a total fresher in the market, without many experiences, but I have strong willingness to learn new stuff, new technologies or algorithms. And I also have the ability of quick learning, applying knowledge into practical development.  (And also from my previous subject experiences aligned well with this position’s requirement, I think I can fit this position.) </em></p>
<h3 id="2-What-interests-you-about-this-job-Why-you-apply-this-job-And-Why-hire-you"><a href="#2-What-interests-you-about-this-job-Why-you-apply-this-job-And-Why-hire-you" class="headerlink" title="2. What interests you about this job? Why you apply this job? And Why hire you?"></a>2. What interests you about this job? Why you apply this job? And Why hire you?</h3><p><em> As a new graduate, I have theoretical knowledge but I am willing to work hard for my organization. I would put all my efforts  for the  good progress. Being punctual and sincere, I can finish the job given to me on time and try my best to fulfill all the requirement in high quality.  And I also a team player, I would like to communicate with colleagues, share ideas and solve all problems in a better way. </em></p>
<h3 id="3-Describe-a-project-you-have-done-and-describe-your-role-and-responsibility-in-that-project"><a href="#3-Describe-a-project-you-have-done-and-describe-your-role-and-responsibility-in-that-project" class="headerlink" title="3. Describe a project you have done, and describe your role and responsibility in that project"></a>3. Describe a project you have done, and describe your role and responsibility in that project</h3><p><em> I would like to talk about a recent subject project- Touch Frame. This is an cross-platform mobile  application to provide services for carers to monitor and manage the health condition of elder persons who lives alone. It is a big project so I have 8 team mates and we apply agile process to develop. The main technology is Node js as back-end development and react framework to handle front-end development. </em></p>
<h3 id="4-What-are-your-strong-points"><a href="#4-What-are-your-strong-points" class="headerlink" title="4. What are your strong points?"></a>4. What are your strong points?</h3><p><em> Basically, I am a punctual and honest person. And I am always self-motivated and have a long- term ambition which pushes me to finish work to satisfy both quality and time requirement. And I try to be more optimistic and flexible to get used to different situations in order to calm down and finish tasks efficiently. </em></p>
<h3 id="5-What-is-your-top-3-skills"><a href="#5-What-is-your-top-3-skills" class="headerlink" title="5. What is your top 3 skills?"></a>5. What is your top 3 skills?</h3><h3 id="6-What-is-your-weakness-And-how-would-you-like-to-improve"><a href="#6-What-is-your-weakness-And-how-would-you-like-to-improve" class="headerlink" title="6. What is your weakness? And how would you like to improve?"></a>6. What is your weakness? And how would you like to improve?</h3><p><em> Cause sometimes I have over ambition and self-expectation, I would be sensitive to other’s criticism and feel upset. But I have learned how to encourage myself and rebuild confidence.  And sometimes I can not say no to others when they ask help so I always put myself into a really busy condition. </em></p>
<h3 id="7-What-is-your-career-goal-Imagine-yourself-in-10-years-and-then-tell-us-what-you-would-look-like-in-10-years-what-kind-of-job-position"><a href="#7-What-is-your-career-goal-Imagine-yourself-in-10-years-and-then-tell-us-what-you-would-look-like-in-10-years-what-kind-of-job-position" class="headerlink" title="7. What is your career goal? (Imagine yourself in 10 years, and then tell us what you would look like in 10 years, what kind of job? position?)"></a>7. What is your career goal? (Imagine yourself in 10 years, and then tell us what you would look like in 10 years, what kind of job? position?)</h3><p><em>My short term goal is to get a job in a reputed company where I can utilize my knowledge and skills and improve my career path.<br>And my long term goal is to pursue a respectable or management position in that company.</em></p>
<h3 id="8-Describe-a-challenge-you-have-met"><a href="#8-Describe-a-challenge-you-have-met" class="headerlink" title="8. Describe a challenge you have met"></a>8. Describe a challenge you have met</h3><p><em> I have faced many challenges in my life. Actually I think life itself is a big challenge. Everyday we have to come across different problems, resolve them and learn from mistakes.  Well, the toughest challenge I have met recently is a big change I have met for one of my subject projects. I have to finish an enterprise project within one semester instead of a whole year with my teammates. It is because at the beginning of 2nd semester, the client of the project changed. So the entire direction, technology and strategy had to change. Initially, my team members were frustrated and lack of confidence of completing this project on time. But I know this is the truth and I have to accept it without other choices. So I selected the relevant part of work from previous semester, encouraged my team members to catch up other group’s progress, and negotiated with new clients about current situation and finally persuaded him to decide the at least part that have to do. So after my hard work and dedication, my team members cheered up and hard work again. So finally we finished the project perfectly. </em></p>
<h3 id="9-Describe-a-change-you-have-met-and-how-you-handle-it"><a href="#9-Describe-a-change-you-have-met-and-how-you-handle-it" class="headerlink" title="9. Describe a change you have met and how you handle it"></a>9. Describe a change you have met and how you handle it</h3><p><em> </em></p>
<h3 id="10-Describe-a-conflit-you-have-met-ahe-how-you-handle-it"><a href="#10-Describe-a-conflit-you-have-met-ahe-how-you-handle-it" class="headerlink" title="10. Describe a conflit you have met ahe how you handle it"></a>10. Describe a conflit you have met ahe how you handle it</h3><h3 id="11-How-would-you-like-to-handle-stree-and-pressure"><a href="#11-How-would-you-like-to-handle-stree-and-pressure" class="headerlink" title="11. How would you like to handle stree and pressure?"></a>11. How would you like to handle stree and pressure?</h3><p><em> Well actually, this kind of situations always happens in school life. You know, in end of each semester, there would be several assignment or project from different subjects which always due in same time period. So to handle this situation, I always list all my tasks and separate them into 4 levels. The easy and urgent ones, the hard but urgent ones, the easy and not urgent ones and hard and not urgent ones. Then I would deal with different kind of tasks respectively in this sequence. And this method  always works and turns out a fair outcome. </em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Common-Behavior-Questions&quot;&gt;&lt;a href=&quot;#Common-Behavior-Questions&quot; class=&quot;headerlink&quot; title=&quot;Common Behavior Questions&quot;&gt;&lt;/a&gt;Common Beha
    
    </summary>
    
    
      <category term="Behavior Questions" scheme="http://xinghu0164.github.io/tags/Behavior-Questions/"/>
    
  </entry>
  
  <entry>
    <title>C# Study Note2</title>
    <link href="http://xinghu0164.github.io/2017/07/01/C-L2/"/>
    <id>http://xinghu0164.github.io/2017/07/01/C-L2/</id>
    <published>2017-07-01T02:42:10.000Z</published>
    <updated>2017-07-02T04:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types :"></a>Data Types :</h2><p>The variables in C#, are categorized into the following types:</p>
<h3 id="Value-types"><a href="#Value-types" class="headerlink" title="Value types"></a>Value types</h3><ul>
<li>derive from System.ValueType, contains data directly</li>
</ul>
<table>
<thead>
<tr>
<th>Type</th>
<th>Represents</th>
<th>Range</th>
<th>Default Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>bool</td>
<td>Boolean value</td>
<td>True or False</td>
<td>False</td>
</tr>
<tr>
<td>byte</td>
<td>8-bit unsigned integer</td>
<td>0 to 255</td>
<td>0</td>
</tr>
<tr>
<td>char</td>
<td>16-bit Unicode character</td>
<td>U +0000 to U +ffff</td>
<td>‘\0’</td>
</tr>
<tr>
<td>decimal</td>
<td>128-bit precise decimal values with 28-29 significant digits</td>
<td>(-7.9 x 10^28 to 7.9 x 10^28) / 100 to 28</td>
<td>0.0M</td>
</tr>
<tr>
<td>double</td>
<td>64-bit double-precision floating point type</td>
<td>(+/-)5.0 x 10^-324 to (+/-)1.7 x 10^308</td>
<td>0.0D</td>
</tr>
<tr>
<td>float</td>
<td>32-bit single-precision floating point type</td>
<td>-3.4 x 10^38 to + 3.4 x 10^38</td>
<td>0.0F</td>
</tr>
<tr>
<td>int</td>
<td>32-bit signed integer type</td>
<td>-2,147,483,648 to 2,147,483,647</td>
<td>0</td>
</tr>
<tr>
<td>long</td>
<td>64-bit signed integer type</td>
<td>-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807}0L</td>
</tr>
<tr>
<td>sbyte</td>
<td>8-bit signed integer type</td>
<td>-128 to 127</td>
<td>0</td>
</tr>
<tr>
<td>short</td>
<td>16-bit signed integer type</td>
<td>-32,768 to 32,767</td>
<td>0</td>
</tr>
<tr>
<td>uint</td>
<td>32-bit unsigned integer type</td>
<td>0 to 4,294,967,295</td>
<td>0</td>
</tr>
<tr>
<td>ulong</td>
<td>64-bit unsigned integer type</td>
<td>0 to 18,446,744,073,709,551,615</td>
<td>0</td>
</tr>
<tr>
<td>ushort</td>
<td>16-bit unsigned integer type</td>
<td>0 to 65,535</td>
<td>0</td>
</tr>
</tbody>
</table>
<p><em>Unsigned can hold a larger positive value, and no negative value. Unsigned uses the leading bit as a part of the value, while the signed version uses the left-most-bit to identify if the number is positive or negative. signed integers can hold both positive and negative numbers.</em> </p>
<h3 id="Reference-types"><a href="#Reference-types" class="headerlink" title="Reference types"></a>Reference types</h3><p>The reference types do not contain the actual data stored in a variable, but they contain a reference to the variables, that is, they refer to a memory location. Using multiple variables, the reference types can refer to a memory location. If the data in the memory location is changed by one of the variables, the other variable automatically reflects this change in value.</p>
<ol>
<li><p>Object type</p>
<ul>
<li>The object types can be assigned values of any other types, value types, reference types, predefined or user-defined types. </li>
<li><strong>boxing</strong> and <strong>unboxing</strong><br>When a value type is converted to object type, it is called <strong>boxing</strong> ; when an object type is converted to a value type, it is called <strong>unboxing</strong>.<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">object obj;</div><div class="line">obj = 100;  // this is boxing</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Dynamic type</p>
<ul>
<li>can store any type of value in the dynamic data type variable. </li>
<li><p>Type checking for these types of variables takes place at run-time.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dynamic d = 20;</div></pre></td></tr></table></figure>
</li>
<li><p>Dynamic types are similar to object types except that <em>type checking</em> for <strong>object type variables takes place at compile time_</strong>, whereas that for <strong>the dynamic type variables takes place at run time</strong>.</p>
</li>
</ul>
</li>
<li><p>String type</p>
<ul>
<li>derive from object type– System.String class</li>
<li>quoted VS unquoted string<br>determine by final representation with quote or not<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">String a = &quot;AAA&quot;; // unquoted string,</div><div class="line">String b = &quot;&quot;bbb&quot;&quot;;// quoted string.</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>User-Defined reference type:</p>
<ul>
<li>class</li>
<li>interface</li>
<li>delegate</li>
</ul>
</li>
</ol>
<h3 id="Pointer-types"><a href="#Pointer-types" class="headerlink" title="Pointer types"></a>Pointer types</h3><p>Pointer type variables store the memory address of another type. </p>
<h2 id="Type-conversion"><a href="#Type-conversion" class="headerlink" title="Type conversion"></a>Type conversion</h2><p>Type conversion is converting one type of data to another type. It is also known as Type Casting. In C#, type casting has two forms:</p>
<ul>
<li><p><strong>Implicit type conversion</strong> - These conversions are performed by C# in a type-safe manner. For example, are conversions from smaller to larger integral types and conversions from derived classes to base classes.</p>
</li>
<li><p><strong>Explicit type conversion</strong> - These conversions are done explicitly by users using the pre-defined functions. Explicit conversions require a cast operator.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">double d = 45.1234;</div><div class="line">int i = (int) d;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><p>A variable is <strong>a name given to a storage area that our programs can manipulate</strong>. Each variable in C# has a specific type, which determines the size and layout of the variable’s memory the range of values that can be stored within that memory and the set of operations that can be applied to the variable.</p>
<p>The <em>basic value types</em> provided in C# can be <strong>categorized</strong> as:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td>Integral types</td>
<td>sbyte, byte, short, ushort, int, uint, long, ulong, and char</td>
</tr>
<tr>
<td>Floating point types</td>
<td>float and double</td>
</tr>
<tr>
<td>Decimal types</td>
<td>decimal</td>
</tr>
<tr>
<td>Boolean types</td>
<td>true or false values, as assigned</td>
</tr>
<tr>
<td>Nullable types</td>
<td>Nullable data types</td>
</tr>
<tr>
<td>others</td>
<td>Enum and class</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Data-Types&quot;&gt;&lt;a href=&quot;#Data-Types&quot; class=&quot;headerlink&quot; title=&quot;Data Types :&quot;&gt;&lt;/a&gt;Data Types :&lt;/h2&gt;&lt;p&gt;The variables in C#, are categoriz
    
    </summary>
    
    
      <category term="C#" scheme="http://xinghu0164.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>ASP.Net Study Note1</title>
    <link href="http://xinghu0164.github.io/2017/06/30/NetL1/"/>
    <id>http://xinghu0164.github.io/2017/06/30/NetL1/</id>
    <published>2017-06-30T12:11:22.000Z</published>
    <updated>2017-06-30T12:29:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>The .Net framework consists of an enormous library of codes used by the client languages such as C#. Following are some of the components of the .Net framework:</p>
<ul>
<li>Common Language Runtime (CLR)</li>
<li>The .Net Framework Class Library</li>
<li>Common Language Specification</li>
<li>Common Type System</li>
<li>Metadata and Assemblies</li>
<li>Windows Forms</li>
<li>ASP.Net and ASP.Net AJAX</li>
<li>ADO.Net</li>
<li>Windows Workflow Foundation (WF)</li>
<li>Windows Presentation Foundation</li>
<li>Windows Communication Foundation (WCF)</li>
<li>LINQ</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The .Net framework consists of an enormous library of codes used by the client languages such as C#. Following are some of the components
    
    </summary>
    
    
      <category term="ASP.NET" scheme="http://xinghu0164.github.io/tags/ASP-NET/"/>
    
  </entry>
  
  <entry>
    <title>markdown-note</title>
    <link href="http://xinghu0164.github.io/2017/06/26/markdown-note/"/>
    <id>http://xinghu0164.github.io/2017/06/26/markdown-note/</id>
    <published>2017-06-26T06:47:09.000Z</published>
    <updated>2017-07-19T04:19:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction-of-Markdown"><a href="#Introduction-of-Markdown" class="headerlink" title="Introduction of Markdown"></a>Introduction of Markdown</h1><p>Markdown is a lightweight and easy-to-use syntax for styling all forms of writing on the GitHub platform. It’s written in what nerds like to call “plaintext”, which is exactly the sort of text you’re used to writing and seeing.</p>
<h1 id="Syntax-guide"><a href="#Syntax-guide" class="headerlink" title="Syntax guide"></a>Syntax guide</h1><h4 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h4><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># This is an &lt;h1&gt; tag</span></div><div class="line"><span class="comment">## This is an &lt;h2&gt; tag</span></div><div class="line"><span class="comment">###### This is an &lt;h6&gt; tag</span></div></pre></td></tr></table></figure>
<h4 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h4><p><em>This text will be italic</em><br><em>This will also be italic</em><br><strong>This text will be bold</strong><br><strong>This will also be bold</strong><br><em>You <strong>can</strong> combine them</em><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">*This text will be italic*</div><div class="line">_This will also be italic_</div><div class="line">**This text will be bold**</div><div class="line">__This will also be bold__</div><div class="line">_You **can** combine them_</div></pre></td></tr></table></figure></p>
<h4 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h4><h5 id="Unordered"><a href="#Unordered" class="headerlink" title="Unordered"></a>Unordered</h5><ul>
<li>Item 1</li>
<li>Item 2<ul>
<li>Item 2a</li>
<li>Item 2b<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">* Item 1</div><div class="line">* Item 2</div><div class="line">  * Item 2a</div><div class="line">  * Item 2b</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h5 id="Ordered"><a href="#Ordered" class="headerlink" title="Ordered"></a>Ordered</h5><ol>
<li>Item 1</li>
<li>Item 2</li>
<li>Item 3<ol>
<li>Item 3a</li>
<li>Item 3b<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">1. Item 1</div><div class="line">1. Item 2</div><div class="line">1. Item 3</div><div class="line">   1. Item 3a</div><div class="line">   1. Item 3b</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<h4 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">![GitHub Logo](/images/logo.png)</div><div class="line">Format: ![Alt Text](url)</div></pre></td></tr></table></figure>
<h2 id="Video-embedded-with-image"><a href="#Video-embedded-with-image" class="headerlink" title="Video embedded with image"></a>Video embedded with image</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[![image text](image link)](video link)</div></pre></td></tr></table></figure>
<h4 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h4><p><a href="http://github.com" target="_blank" rel="external">http://github.com</a><br><a href="http://github.com" target="_blank" rel="external">GitHub</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://github.com - automatic!</div><div class="line">[GitHub](http://github.com)</div></pre></td></tr></table></figure></p>
<h4 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h4><p>As Kanye West said:</p>
<blockquote>
<p>We’re living the future so<br>the present is our past.<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; We&apos;re living the future so</div><div class="line">&gt; the present is our past.</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="Inline-code"><a href="#Inline-code" class="headerlink" title="Inline code"></a>Inline code</h4><p>I think you should use an <code>&lt;addr&gt;</code> element here instead.</p>
<h4 id="Task-Lists"><a href="#Task-Lists" class="headerlink" title="Task Lists"></a>Task Lists</h4><ul>
<li>[x] @mentions, #refs, <a href="">links</a>, <strong>formatting</strong>, and <del>tags</del> supported</li>
<li>[x] list syntax required (any unordered or ordered list supported)</li>
<li>[x] this is a complete item</li>
<li>[ ] this is an incomplete item<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- [x] @mentions, #refs, [links](), **formatting**, and &lt;del&gt;tags&lt;/del&gt; supported</div><div class="line">- [x] list syntax required (any unordered or ordered list supported)</div><div class="line">- [x] this is a complete item</div><div class="line">- [ ] this is an incomplete item</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h4><p>You can create tables by assembling a list of words and dividing them with hyphens - (for the first row), and then separating each column with a pipe |:</p>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
<th>Third Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content from cell 1</td>
<td>Content from cell 2</td>
<td>Content from cell 3</td>
</tr>
<tr>
<td>Content in the first column</td>
<td>Content in the second column</td>
<td>Content in the third column</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">First Header | Second Header| Third Header</div><div class="line">------------ | -------------|------------</div><div class="line">Content from cell 1 | Content from cell 2| Content from cell 3</div><div class="line">Content in the first column | Content in the second column | Content in the third column</div></pre></td></tr></table></figure>
<p>(different from basic syntax, the second row dont have | at beginning and end)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Introduction-of-Markdown&quot;&gt;&lt;a href=&quot;#Introduction-of-Markdown&quot; class=&quot;headerlink&quot; title=&quot;Introduction of Markdown&quot;&gt;&lt;/a&gt;Introduction o
    
    </summary>
    
    
      <category term="MarkDown" scheme="http://xinghu0164.github.io/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>C# Study Note1</title>
    <link href="http://xinghu0164.github.io/2017/06/24/C-L1/"/>
    <id>http://xinghu0164.github.io/2017/06/24/C-L1/</id>
    <published>2017-06-24T10:44:47.000Z</published>
    <updated>2017-06-30T12:32:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction-of-C"><a href="#Introduction-of-C" class="headerlink" title="Introduction of C"></a>Introduction of C</h2><p>C# is designed for Common Language Infrastructure (CLI), which consists of the executable code and runtime environment that allows use of various high-level languages on different computer platforms and architectures.</p>
<h2 id="Reasons-make-C-a-widely-used-professional-language"><a href="#Reasons-make-C-a-widely-used-professional-language" class="headerlink" title="Reasons make C# a widely used professional language:"></a>Reasons make C# a widely used professional language:</h2><ul>
<li>It is a modern, general-purpose programming language</li>
<li>It is object oriented.</li>
<li>It is component oriented.</li>
<li>It is easy to learn.</li>
<li>It is a structured language.</li>
<li>It produces efficient programs.</li>
<li>It can be compiled on a variety of computer platforms.</li>
<li>It is a part of .Net Framework.</li>
</ul>
<h2 id="Important-features-of-C"><a href="#Important-features-of-C" class="headerlink" title="Important features of C"></a>Important features of C</h2><ul>
<li>Boolean Conditions</li>
<li>Automatic Garbage Collection</li>
<li>Standard Library</li>
<li>Assembly Versioning</li>
<li>Properties and Events</li>
<li>Delegates and Events Management</li>
<li>Easy-to-use Generics</li>
<li>Indexers</li>
<li>Conditional Compilation</li>
<li>Simple Multithreading</li>
<li>LINQ and Lambda Expressions</li>
<li>Integration with Windows</li>
</ul>
<h2 id="C-Notes"><a href="#C-Notes" class="headerlink" title="C# Notes"></a>C# Notes</h2><ul>
<li>C# is case sensitive.</li>
<li>All statements and expression must end with a semicolon (;).</li>
<li>The program execution starts at the Main method.</li>
<li>Unlike Java, program file name could be different from the class name.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Introduction-of-C&quot;&gt;&lt;a href=&quot;#Introduction-of-C&quot; class=&quot;headerlink&quot; title=&quot;Introduction of C&quot;&gt;&lt;/a&gt;Introduction of C&lt;/h2&gt;&lt;p&gt;C# is desi
    
    </summary>
    
    
      <category term="C#" scheme="http://xinghu0164.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Introduction of Hexo</title>
    <link href="http://xinghu0164.github.io/2017/06/20/Get-Start/"/>
    <id>http://xinghu0164.github.io/2017/06/20/Get-Start/</id>
    <published>2017-06-20T06:47:09.000Z</published>
    <updated>2017-07-03T14:18:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction-of-Website-Techniques"><a href="#Introduction-of-Website-Techniques" class="headerlink" title="Introduction of Website Techniques"></a>Introduction of Website Techniques</h1><p>This website build on <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> and Github Pages. </p>
<p>Hexo is a fast, simple &amp; powerful blog framework. It is based on Node.JS and brings incredible generating speed. All features of GitHub Flavored Markdown are supported.</p>
<p>GitHub Pages is a static site hosting service. It is designed to host personal, organization, or project pages directly from a GitHub repository.</p>
<h2 id="Hexo-Quick-Start"><a href="#Hexo-Quick-Start" class="headerlink" title="Hexo Quick Start"></a>Hexo Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<h3 id="Create-a-page-and-its-index-post"><a href="#Create-a-page-and-its-index-post" class="headerlink" title="Create a page and its index post"></a>Create a page and its index post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">hexo new page <span class="string">"tags"</span></div></pre></td></tr></table></figure>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<h3 id="Delete-a-post"><a href="#Delete-a-post" class="headerlink" title="Delete a post"></a>Delete a post</h3><ol>
<li>delete the post under <em>source/_post</em> folder</li>
<li>run following commands<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
</li>
</ol>
<p>Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Introduction-of-Website-Techniques&quot;&gt;&lt;a href=&quot;#Introduction-of-Website-Techniques&quot; class=&quot;headerlink&quot; title=&quot;Introduction of Website 
    
    </summary>
    
    
      <category term="Hexo" scheme="http://xinghu0164.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
